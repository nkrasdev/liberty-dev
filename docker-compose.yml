version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: aggregator-postgres
    environment:
      POSTGRES_DB: aggregator
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aggregator-network

  redis:
    image: redis:7-alpine
    container_name: aggregator-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aggregator-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: aggregator-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aggregator-network

  minio:
    image: minio/minio:latest
    container_name: aggregator-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aggregator-network

  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    container_name: aggregator-api
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/aggregator
      REDIS_URL: redis://redis:6379/0
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET: aggregator-data
      MINIO_SECURE: "false"
      API_HOST: 0.0.0.0
      API_PORT: 8000
      LOG_LEVEL: INFO
      LOG_FORMAT: json
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aggregator-network

  saver:
    build:
      context: .
      dockerfile: Dockerfile
      target: saver
    container_name: aggregator-saver
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/aggregator
      REDIS_URL: redis://redis:6379/0
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET: aggregator-data
      MINIO_SECURE: "false"
      LOG_LEVEL: INFO
      LOG_FORMAT: json
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://api:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aggregator-network

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  minio_data:

networks:
  aggregator-network:
    driver: bridge
